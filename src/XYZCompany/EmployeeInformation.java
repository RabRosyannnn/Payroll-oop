/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package XYZCompany;

import java.awt.Component;
import java.awt.event.MouseListener;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RazR
 */
public class EmployeeInformation extends javax.swing.JInternalFrame {

    Connection con;
    String [] ColumnNames = {"EmployeeID","FirstName", "LastName", "Department", "Join Date", "Position", "EPFNumber", "Address", "Gender", "AccountNumber", "BankName", "SalaryType", "Email", "Contact", "DateOfBirth", "Status"};
    public EmployeeInformation() {
        initComponents();
        FrameUI();
        EmployeeInformationTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        EmployeeInformationTable.setFillsViewportHeight(true);
    }

    private void FrameUI()
    {
        setSize(760, 550);
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setTitle("Employee Information");
        setClosable(true);
        BasicInternalFrameUI basicInternalFrameUI = ((javax.swing.plaf.basic.BasicInternalFrameUI) getUI());
        for (MouseListener listener : basicInternalFrameUI.getNorthPane().getMouseListeners()) 
        {
            basicInternalFrameUI.getNorthPane().removeMouseListener(listener);
        }

    }
    
    public void EmployeeNameDatabase()
    {
        try
        {
            Statement st = con.createStatement();
            ResultSet rs=st.executeQuery("select * from EmployeeTable");
            while (rs.next()) 
            {  
                cmbEmployeeID.addItem(rs.getString("EmployeeID").trim());
                cmbEPFNumber.addItem(rs.getString("EPFNumber").trim());
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(rootPane,"Exception error occured during execution\nError: "+e,"Database Connection Error", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    
    public void TableResize() {
        JTable table = EmployeeInformationTable;
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        for (int column = 0; column < table.getColumnCount(); column++) {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                Component c = table.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);

        //  We've exceeded the maximum width, no need to check other rows
                if (preferredWidth >= maxWidth) {
                    preferredWidth = maxWidth;
                    break;
                }
            }

            tableColumn.setPreferredWidth(preferredWidth);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EmployeeInformationTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbEPFNumber = new javax.swing.JComboBox();
        cmbEmployeeID = new javax.swing.JComboBox();

        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/XYZCompany/EmployeeInformationIcon.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        EmployeeInformationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        EmployeeInformationTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(EmployeeInformationTable);

        javax.swing.GroupLayout TablePanelLayout = new javax.swing.GroupLayout(TablePanel);
        TablePanel.setLayout(TablePanelLayout);
        TablePanelLayout.setHorizontalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        TablePanelLayout.setVerticalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("EPF Number");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Employee ID");

        cmbEPFNumber.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cmbEPFNumber.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<select EPF Number>" }));
        cmbEPFNumber.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEPFNumberItemStateChanged(evt);
            }
        });
        cmbEPFNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEPFNumberActionPerformed(evt);
            }
        });

        cmbEmployeeID.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cmbEmployeeID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<select employee id>" }));
        cmbEmployeeID.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEmployeeIDItemStateChanged(evt);
            }
        });
        cmbEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEmployeeIDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cmbEPFNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cmbEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cmbEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cmbEPFNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbEPFNumberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEPFNumberItemStateChanged
        String ComboEPFNumber = cmbEPFNumber.getSelectedItem().toString();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(ColumnNames);
        if(ComboEPFNumber.contains("<"))
        {
            EmployeeInformationTable.setVisible(false);
        }
        else
        {
            EmployeeInformationTable.setVisible(true);
            try
            {
                PreparedStatement stat = con.prepareStatement("SELECT * FROM EmployeeTable WHERE EPFNumber=?");
                stat.setString(1, ComboEPFNumber);
                ResultSet rs = stat.executeQuery();
                int row = 0;
                while (rs.next())
                {
                    String EmployeeID = rs.getString("EmployeeID");
                    String FirstName = rs.getString("EmployeeFirstName");
                    String LastName = rs.getString("EmployeeLastName");
                    String Department = rs.getString("Department");
                    String JoinDate = rs.getString("DateOfJoining");
                    String Position = rs.getString("WorkingPosition");
                    String EPFNumber = rs.getString("EPFNumber");
                    String Address = rs.getString("ResidentialAddress").trim();
                    String Gender = rs.getString("Gender");
                    String AccountNumber = rs.getString("BankAccountNumber");
                    String BankName = rs.getString("BankName");
                    String SalaryType = rs.getString("SalaryType");
                    String Email = rs.getString("Email");
                    String Contact = rs.getString("ContactNumber");
                    String DateOfBirth = rs.getString("DateOfBirth");
                    String Status = rs.getString("WorkingStatus");
                    
                    model.addRow(new Object[] {EmployeeID, FirstName, LastName, Department, JoinDate, Position, EPFNumber, Address, Gender, AccountNumber, BankName, SalaryType, Email, Contact, DateOfBirth, Status});
                    row++;
                    if (row > 0)
                    {
                        System.out.println("Found "+EPFNumber);
                    }
                    EmployeeInformationTable.setModel(model);
                }
            }
            catch(SQLException e)
            {
                JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: " + e, "EPF Number Generation Error in Fixed Salary Table", JOptionPane.WARNING_MESSAGE);
            }
        }
        TableResize();
    }//GEN-LAST:event_cmbEPFNumberItemStateChanged

    private void cmbEPFNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEPFNumberActionPerformed
        String ComboEPF = cmbEPFNumber.getSelectedItem().toString();
        String ComboIDNumber = "";
        if (ComboEPF.startsWith("<"))
        {
            cmbEmployeeID.setSelectedIndex(0);
        }
        else
        {
                try
                {
                    PreparedStatement stat = con.prepareStatement("select * from EmployeeTable where EPFNumber=?");
                    stat.setString(1, ComboEPF);

                    ResultSet rs = stat.executeQuery();

                    while (rs.next()) {
                        ComboIDNumber = rs.getString("EmployeeID").trim();
                        for (int i = 1; i < cmbEmployeeID.getItemCount(); i++) {
                            if (cmbEmployeeID.getItemAt(i).equals(ComboIDNumber)) {
                                cmbEmployeeID.setSelectedIndex(i);
                                break;
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: " + e, "EPF Number Generation Error in Fixed Salary Table", JOptionPane.WARNING_MESSAGE);
                }
        }

    }//GEN-LAST:event_cmbEPFNumberActionPerformed

    private void cmbEmployeeIDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEmployeeIDItemStateChanged
        
       
    }//GEN-LAST:event_cmbEmployeeIDItemStateChanged

    private void cmbEmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEmployeeIDActionPerformed
        String ComboEmployeeID = cmbEmployeeID.getSelectedItem().toString();
        String ComboEPFNumber = "";
        if (ComboEmployeeID.startsWith("<"))
        {
            cmbEPFNumber.setSelectedIndex(0);
        }
        else {
            try
            {
                PreparedStatement stat = con.prepareStatement("select * from EmployeeTable where EmployeeID=?");
                stat.setString(1, ComboEmployeeID);

                ResultSet rs = stat.executeQuery();
                while (rs.next())
                {
                    ComboEPFNumber = rs.getString("EPFNumber").trim();
                    for (int i=1; i<cmbEPFNumber.getItemCount();i++)
                    {
                        if (cmbEPFNumber.getItemAt(i).equals(ComboEPFNumber))
                        {
                            cmbEPFNumber.setSelectedIndex(i);
                            break;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane,"Exception error occured during execution\nError: "+e,"Employee ID Generation Error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_cmbEmployeeIDActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        try
        {
            setTitle("Employee Information Form");
            DBConnection objDB=new DBConnection();
            con = objDB.getConnection();
        }
        catch(Exception exDB)
        {
            JOptionPane.showMessageDialog(rootPane, "Exception error occured during execution\nError: "+exDB, "Database Connection Error", JOptionPane.ERROR_MESSAGE);
        }
        EmployeeNameDatabase();
    }//GEN-LAST:event_formInternalFrameOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable EmployeeInformationTable;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JComboBox cmbEPFNumber;
    private javax.swing.JComboBox cmbEmployeeID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
